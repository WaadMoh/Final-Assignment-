import tkinter as tk
from tkinter import messagebox, ttk
import pickle


class Customer:
    def __init__(self, username="", password="", address="", balance=0.0):
        self.username = username
        self.password = password
        self.address = address
        self.balance = balance
        self.purchase_orders = []  

    def __str__(self):
        return f"Username: {self.username}, Address: {self.address}, Balance: {self.balance}"


class PurchaseOrder:
    def __init__(self, order_id, details, amount):
        self.order_id = order_id
        self.details = details
        self.amount = amount

    def __str__(self):
        return f"Order ID: {self.order_id}, Details: {self.details}, Amount: ${self.amount}"


TICKET_TYPES = [
    {"type": "Single-Day Pass", "price": 275, "validity": "1 Day", "features": "Access to park for one day"},
    {"type": "Two-Day Pass", "price": 480, "validity": "2 Days", "features": "Access for two consecutive days"},
    {"type": "Annual Membership", "price": 1840, "validity": "1 Year", "features": "Unlimited park access for a year"},
    {"type": "Child Ticket", "price": 185, "validity": "1 Day", "features": "Discounted for ages 3-12"},
    {"type": "Group Ticket (10+)", "price": 220, "validity": "1 Day", "features": "Special rate for groups of 10 or more"},
    {"type": "VIP Experience Pass", "price": 550, "validity": "1 Day", "features": "Expedited access and reserved seating"},
]

def save_data(filename, data):
    with open(filename, "wb") as file:
        pickle.dump(data, file)


def load_data(filename):
    try:
        with open(filename, "rb") as file:
            return pickle.load(file)
    except (FileNotFoundError, EOFError):
        return {}


class AccountManagement:
    def __init__(self):
        self.customers = load_data("accounts.pkl")
        self.root = tk.Tk()
        self.root.geometry("600x400")
        self.root.title("Account Management System")

        self.username_label = tk.Label(self.root, text="Username:")
        self.username_label.grid(row=0, column=0, padx=5, pady=5)
        self.username_entry = tk.Entry(self.root)
        self.username_entry.grid(row=0, column=1, padx=5, pady=5)

        self.password_label = tk.Label(self.root, text="Password:")
        self.password_label.grid(row=1, column=0, padx=5, pady=5)
        self.password_entry = tk.Entry(self.root, show="*")
        self.password_entry.grid(row=1, column=1, padx=5, pady=5)

        self.login_button = tk.Button(self.root, text="Login", command=self.login_customer)
        self.login_button.grid(row=2, column=0, padx=5, pady=5)
        self.create_account_button = tk.Button(self.root, text="Create Account", command=self.create_account)
        self.create_account_button.grid(row=2, column=1, padx=5, pady=5)

        self.root.mainloop()

    def create_account(self):
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        if username in self.customers:
            messagebox.showerror("Error", "Username already exists!")
        elif not username or not password:
            messagebox.showerror("Error", "Username and Password cannot be empty!")
        else:
            self.customers[username] = Customer(username, password)
            save_data("accounts.pkl", self.customers)
            messagebox.showinfo("Success", f"Account for {username} created successfully!")

    def login_customer(self):
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        if username in self.customers and self.customers[username].password == password:
            self.root.destroy()
            if username == "admin":
                AdminDashboard(self.customers)
            else:
                TicketPurchasingApp(self.customers, username)
        else:
            messagebox.showerror("Error", "Invalid username or password!")


class TicketPurchasingApp:
    def __init__(self, customers, username):
        self.customers = customers
        self.customer = customers[username]

        self.root = tk.Tk()
        self.root.title("Ticket Purchasing Interface")
        self.root.geometry("600x400")

        tk.Label(self.root, text=f"Welcome, {username}", font=("Arial", 16, "bold")).pack(pady=10)

        tk.Label(self.root, text="Select a Ticket:", font=("Arial", 14)).pack(anchor="w", padx=20)
        self.ticket_var = tk.StringVar(value="Single-Day Pass")  # Default ticket
        for ticket in TICKET_TYPES:
            tk.Radiobutton(
                self.root,
                text=f"{ticket['type']} - {ticket['price']} DHS ({ticket['validity']})",
                variable=self.ticket_var,
                value=ticket["type"]
            ).pack(anchor="w", padx=30)

        tk.Button(self.root, text="Purchase", command=self.process_purchase, bg="green", fg="white").pack(pady=10)
        tk.Button(self.root, text="Logout", command=self.logout).pack(pady=10)

        self.root.mainloop()

    def process_purchase(self):
        ticket_type = self.ticket_var.get()
        ticket = next(ticket for ticket in TICKET_TYPES if ticket["type"] == ticket_type)
        order = PurchaseOrder(f"Order-{len(self.customer.purchase_orders) + 1}", ticket["type"], ticket["price"])
        self.customer.purchase_orders.append(order)
        save_data("accounts.pkl", self.customers)
        messagebox.showinfo("Success", f"Purchased: {ticket['type']}!")

    def logout(self):
        self.root.destroy()
        AccountManagement()


class AdminDashboard:
    def __init__(self, customers):
        self.customers = customers
        self.root = tk.Tk()
        self.root.title("Admin Dashboard")
        self.root.geometry("600x400")

        tk.Label(self.root, text="Admin Dashboard", font=("Arial", 16, "bold")).pack(pady=10)

        tk.Button(self.root, text="View Customers", command=self.display_customers).pack(pady=10)
        tk.Button(self.root, text="View Sales Report", command=self.view_sales).pack(pady=10)
        tk.Button(self.root, text="Logout", command=self.logout).pack(pady=10)

        self.root.mainloop()

    def display_customers(self):
        display_window = tk.Toplevel(self.root)
        display_window.title("Customer Details")
        display_window.geometry("400x300")
        text_area = tk.Text(display_window)
        text_area.pack(expand=True, fill="both")
        for customer in self.customers.values():
            text_area.insert(tk.END, f"{customer}\n")

    def view_sales(self):
        total_sales = 0
        total_orders = 0
        for customer in self.customers.values():
            total_orders += len(customer.purchase_orders)
            total_sales += sum(order.amount for order in customer.purchase_orders)
        messagebox.showinfo("Sales Report", f"Total Tickets Sold: {total_orders}\nTotal Sales: {total_sales} DHS")

    def logout(self):
        self.root.destroy()
        AccountManagement()


if __name__ == "__main__":
    AccountManagement()
