import tkinter as tk
from tkinter import messagebox
from tkinter import ttk


class Customer:
    def __init__(self, username="", password="", address="", balance=0.0):
        self.username = username
        self.password = password
        self.address = address
        self.balance = balance
        self.purchase_orders = []  # Tracks purchase orders

    def __str__(self):
        return f"Username: {self.username}, Address: {self.address}, Balance: {self.balance}"


class PurchaseOrder:
    def __init__(self, order_id, details, amount):
        self.order_id = order_id
        self.details = details
        self.amount = amount

    def __str__(self):
        return f"Order ID: {self.order_id}, Details: {self.details}, Amount: ${self.amount}"


class AccountManagement:
    def __init__(self):
        self.customers = {}
        self.root = tk.Tk()
        self.root.geometry("600x400")
        self.root.title("Account Management System")

        self.username_label = tk.Label(self.root, text="Username:")
        self.username_label.grid(row=0, column=0, padx=5, pady=5)
        self.username_entry = tk.Entry(self.root)
        self.username_entry.grid(row=0, column=1, padx=5, pady=5)

        self.password_label = tk.Label(self.root, text="Password:")
        self.password_label.grid(row=1, column=0, padx=5, pady=5)
        self.password_entry = tk.Entry(self.root, show="*")
        self.password_entry.grid(row=1, column=1, padx=5, pady=5)

        self.login_button = tk.Button(self.root, text="Login", command=self.login_customer)
        self.login_button.grid(row=2, column=0, padx=5, pady=5)
        self.create_account_button = tk.Button(self.root, text="Create Account", command=self.create_account)
        self.create_account_button.grid(row=2, column=1, padx=5, pady=5)

        self.action_label = tk.Label(self.root, text="Actions:")
        self.action_label.grid(row=3, column=0, padx=5, pady=5)
        self.action_combobox = ttk.Combobox(
            self.root, values=["Add Customer", "Delete Customer", "Modify Customer", "Display Customers", "View/Modify/Delete Orders"]
        )
        self.action_combobox.grid(row=3, column=1, padx=5, pady=5)

        self.execute_button = tk.Button(self.root, text="Execute", command=self.execute_action)
        self.execute_button.grid(row=4, column=1, padx=5, pady=5)

        self.root.mainloop()

    def create_account(self):
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        if username in self.customers:
            messagebox.showerror("Error", "Username already exists!")
        elif not username or not password:
            messagebox.showerror("Error", "Username and Password cannot be empty!")
        else:
            self.customers[username] = Customer(username, password)
            messagebox.showinfo("Success", f"Account for {username} created successfully!")

    def login_customer(self):
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        if username in self.customers and self.customers[username].password == password:
            messagebox.showinfo("Success", f"Welcome back, {username}!")
        else:
            messagebox.showerror("Error", "Invalid username or password!")

    def execute_action(self):
        action = self.action_combobox.get()
        if action == "Add Customer":
            self.add_customer()
        elif action == "Delete Customer":
            self.delete_customer()
        elif action == "Modify Customer":
            self.modify_customer()
        elif action == "Display Customers":
            self.display_customers()
        elif action == "View/Modify/Delete Orders":
            self.manage_orders()
        else:
            messagebox.showerror("Error", "Please select a valid action!")

    def add_customer(self):
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        if username in self.customers:
            messagebox.showerror("Error", "Username already exists!")
        elif not username or not password:
            messagebox.showerror("Error", "Username and Password cannot be empty!")
        else:
            address = "Default Address"
            balance = 100.0  # Default balance
            self.customers[username] = Customer(username, password, address, balance)
            messagebox.showinfo("Success", f"Customer {username} added successfully!")

    def delete_customer(self):
        username = self.username_entry.get().strip()
        if username in self.customers:
            del self.customers[username]
            messagebox.showinfo("Success", f"Customer {username} deleted successfully!")
        else:
            messagebox.showerror("Error", "Customer not found!")

    def modify_customer(self):
        username = self.username_entry.get().strip()
        if username in self.customers:
            customer = self.customers[username]
            address = messagebox.askstring("Modify Address", "Enter new address:")
            balance = messagebox.askfloat("Modify Balance", "Enter new balance:")
            if address:
                customer.address = address
            if balance is not None:
                customer.balance = balance
            messagebox.showinfo("Success", f"Customer {username} modified successfully!")
        else:
            messagebox.showerror("Error", "Customer not found!")

    def display_customers(self):
        display_window = tk.Toplevel(self.root)
        display_window.title("Customers")
        display_window.geometry("400x300")
        text_area = tk.Text(display_window, wrap="word")
        text_area.pack(expand=True, fill="both")
        for username, customer in self.customers.items():
            text_area.insert(tk.END, f"{customer}\n")

    def manage_orders(self):
        username = self.username_entry.get().strip()
        if username not in self.customers:
            messagebox.showerror("Error", "Customer not found!")
            return
        customer = self.customers[username]

        order_window = tk.Toplevel(self.root)
        order_window.title(f"{username}'s Orders")
        order_window.geometry("400x300")

        def add_order():
            order_id = messagebox.askstring("Add Order", "Enter Order ID:")
            details = messagebox.askstring("Add Order", "Enter Order Details:")
            amount = messagebox.askfloat("Add Order", "Enter Order Amount:")
            if order_id and details and amount:
                customer.purchase_orders.append(PurchaseOrder(order_id, details, amount))
                messagebox.showinfo("Success", "Order added successfully!")
                update_order_list()

        def delete_order():
            order_id = messagebox.askstring("Delete Order", "Enter Order ID to Delete:")
            order = next((o for o in customer.purchase_orders if o.order_id == order_id), None)
            if order:
                customer.purchase_orders.remove(order)
                messagebox.showinfo("Success", "Order deleted successfully!")
                update_order_list()
            else:
                messagebox.showerror("Error", "Order not found!")

        def update_order_list():
            order_list.delete(0, tk.END)
            for order in customer.purchase_orders:
                order_list.insert(tk.END, str(order))

        order_list = tk.Listbox(order_window)
        order_list.pack(expand=True, fill="both", pady=10)

        add_button = tk.Button(order_window, text="Add Order", command=add_order)
        add_button.pack(side="left", padx=10, pady=10)

        delete_button = tk.Button(order_window, text="Delete Order", command=delete_order)
        delete_button.pack(side="right", padx=10, pady=10)

        update_order_list()


if __name__ == "__main__":
    AccountManagement()
